package snakeDemoGame;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

import javax.swing.*;


public class Mainclass {

	
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			System.out.println("first");
			new GameFrame();
		}

	}
	 class GameFrame extends JFrame{
		 
		GameFrame(){
			System.out.println("3");	
			this.add(new GamePanel());
			this.setTitle("Snake Game1");
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.setResizable(false);
			this.pack();
			this.setVisible(true);
			this.setLocationRelativeTo(null);
			
		}
	}
	 
	 
	 class GamePanel extends JPanel implements ActionListener{
			
		static final int SCREEN_WIDTH = 600;
		static final int SCREEN_HEIGHT = 600;
		static final int UNIT_SIZE = 20;
		static final int GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/(UNIT_SIZE*UNIT_SIZE);
		static final int DELAY = 100;
		final int x[] = new int[GAME_UNITS];
		final int y[] = new int[GAME_UNITS];
		int bodyParts = 6;
		int applesEaten=0;
		int appleX;
		int appleY;
		int appleXg=-200;
		int appleYg=-200;
		
		char direction = 'R';
		boolean running = false,nGift=false,Check10=true;
		Timer timer;
		Random random;
		
		GamePanel(){
			System.out.println("4");
			random = new Random();
			this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
			this.setBackground(Color.black);
			this.setFocusable(true);
			this.addKeyListener(new MyKeyAdapter());
			startGame();
		}
		public void startGame() {
			newApple();
			timer = new Timer(DELAY,this);
			timer.start();
			System.out.println("5");
			running = true;
			
		}
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			System.out.println("8");
			draw(g);
		}
		public void draw(Graphics g) {
			
			if(running) {
				
				/*for(int i=0;i<SCREEN_HEIGHT/UNIT_SIZE;i++) {
					g.drawLine(i*UNIT_SIZE, 0, i*UNIT_SIZE, SCREEN_HEIGHT);
					g.drawLine(0, i*UNIT_SIZE, SCREEN_WIDTH, i*UNIT_SIZE);
				}*/
				
				g.setColor(Color.red);
				g.fillRect(0, 0, UNIT_SIZE, UNIT_SIZE*30);
				g.setColor(Color.red);
				g.fillRect(SCREEN_WIDTH-20, 0, UNIT_SIZE, UNIT_SIZE*30);
				
				
				g.setColor(Color.red);
				g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
			    if(applesEaten%10==0 && applesEaten>0) 
			    {  if(Check10)
			    	newGift();
			    }
			    if(nGift) 
			    {
			    	g.setColor(Color.yellow);
			    	g.fillOval(appleXg, appleYg, UNIT_SIZE+20, UNIT_SIZE+20);

			    }
				for(int i = 0; i< bodyParts;i++) {
					if(i == 0) {
						g.setColor(Color.pink);
						g.fillOval(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
					}
					else {
						//g.setColor(new Color(45,180,0));
						g.setColor(Color.white);
						//g.setColor(new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));
						g.drawOval(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
					}			
				}
				g.setColor(Color.white);
				g.setFont( new Font("Ink Free",Font.BOLD, 40));
				FontMetrics metrics = getFontMetrics(g.getFont());
				g.drawString("Score: "+applesEaten, (SCREEN_WIDTH - metrics.stringWidth("Score: "+applesEaten))/2, g.getFont().getSize());
			}
			else {
				gameOver(g);
			}
			
		}
		public void newApple(){
			
			appleX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
			appleY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
			if(appleX==0||appleX==20||appleX==SCREEN_WIDTH-40)
				newApple();
		}
		public void newGift(){
			 appleXg = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
			 appleYg = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
			 Check10=false;
			 nGift=true;
		}
		public void move(){
			for(int i = bodyParts;i>0;i--) {
				x[i] = x[i-1];
				y[i] = y[i-1];
			}
			
			switch(direction) {
			case 'U':
				y[0] = y[0] - UNIT_SIZE;
				break;
			case 'D':
				y[0] = y[0] + UNIT_SIZE;
				break;
			case 'L':
				x[0] = x[0] - UNIT_SIZE;
				break;
			case 'R':
				x[0] = x[0] + UNIT_SIZE;
				break;
			}
			
		}
		public void checkApple() {
			if((x[0] == appleX) && (y[0] == appleY)) {
				bodyParts++;
				applesEaten++;
				/*if(DELAY>75)
					DELAY=DELAY-10;*/
				nGift=false;
				Check10=true;
				newApple();
			}
		}
		public void checkGift() {
			if(((x[0] == appleXg) && (y[0] == appleYg)) ||((x[0] == appleXg+UNIT_SIZE) && (y[0] == appleYg))||
					((x[0] == appleXg) && (y[0] == appleYg+UNIT_SIZE))||((x[0] == appleXg+UNIT_SIZE) && (y[0] == appleYg+UNIT_SIZE))) {
				
				applesEaten=applesEaten+21;
				nGift=false;
				Check10=true;
				appleXg=-200;
				appleYg=-200;
				
				
			}
		}
		public void checkCollisions() {
			//checks if head collides with body
			for(int i = bodyParts;i>0;i--) {
				if((x[0] == x[i])&& (y[0] == y[i])) {
					running = false;
				}
			}
			//check if head touches left border
			if(x[0] <UNIT_SIZE ) {
				running = false;
				//x[0]=SCREEN_WIDTH-UNIT_SIZE;
			}
			//check if head touches right border
			if(x[0] > SCREEN_WIDTH-UNIT_SIZE*2) {
				running = false;
				//x[0]=0;
			}
			//check if head touches top border
			if(y[0] < 0) {
				//running = false;
				y[0]=SCREEN_HEIGHT-UNIT_SIZE;
			}
			//check if head touches bottom border
			if(y[0] > SCREEN_HEIGHT) {
				//running = false;
				y[0]=0;
			}
			
			if(!running) {
				timer.stop();
			}
		}
		public void gameOver(Graphics g) {
			//Score
			g.setColor(Color.white);
			g.setFont( new Font("Ink Free",Font.BOLD, 40));
			FontMetrics metrics1 = getFontMetrics(g.getFont());
			g.drawString("Score: "+applesEaten, (SCREEN_WIDTH - metrics1.stringWidth("Score: "+applesEaten))/2, g.getFont().getSize());
			//Game Over text
			g.setColor(Color.white);
			g.setFont( new Font("Ink Free",Font.BOLD, 75));
			FontMetrics metrics2 = getFontMetrics(g.getFont());
			g.drawString("Game Over", (SCREEN_WIDTH - metrics2.stringWidth("Game Over"))/2, SCREEN_HEIGHT/2);
		}
		@Override
		public void actionPerformed(ActionEvent e) {
			
			if(running) {
				move();
				checkApple();
				checkGift();
				checkCollisions();
			}
			repaint();
			System.out.println("LOOP");
		}
		
		public class MyKeyAdapter extends KeyAdapter{
			@Override
			public void keyPressed(KeyEvent e) {
				switch(e.getKeyCode()) {
				case KeyEvent.VK_LEFT:
					if(direction != 'R') {
						direction = 'L';
					}
					break;
				case KeyEvent.VK_RIGHT:
					if(direction != 'L') {
						direction = 'R';
					}
					break;
				case KeyEvent.VK_UP:
					if(direction != 'D') {
						direction = 'U';
					}
					break;
				case KeyEvent.VK_DOWN:
					if(direction != 'U') {
						direction = 'D';
					}
					break;
				}
			}
		}
	}
